a = [-0.22044481509758304, -0.4591674587029029, -0.08280366058672144, 0.9716472059185173, 0.11762655464406675, -0.4207782991487028, 0.23949558164061674, 0.4751239122744333, 0.40397759181268045, 0.9383125040122834, -0.156198921945563, 0.8320736523070995, 0.41801378373052706, -0.5143405810410357, -0.2628475166296129, -0.15665302666343195, 0.12739883347419229, 0.12438589591308569, 0.07982234464032886, -0.1556632959101325, -0.028483608649606362, -0.2677156614493035, 0.13449322460381194, -0.057593416802028896, 0.23542927827063231, 0.796725578160792, 0.001000757937310498, 0.18135411961091807, -0.20423960364801175, -0.6754682771937863, -0.018845346760067397, 0.7974031215144406, 0.29955780650597963, 0.20828011601241975, -0.3429682717578435, 0.03978209048476541]
b = [-0.0871943784915925, -0.18300885578226211, 0.3152446535810617, 0.5860699719883881, -0.42843400073615245, -0.672195974168907, 0.26095215663869886, 0.5727714169624791, 0.28956660963791897, -0.6644019419336583, -0.08630974087824977, 0.10023777905077466, 0.6870929905897437, -0.873327687175536, -0.3078358660255979, 0.2951281380916978, 0.08821713136969728, 0.48135348173902714, -0.34805949738480396, -0.49404853479330596, 0.20365088482106597, -0.6799715497075608, -0.2190563117179184, 0.7116272341384573, 0.24126133517600148, -0.5939791595603996, -0.02209511921946894, -0.6617485836697928, -0.3496371283011722, -0.6256528081210382, 0.5265244774061151, 0.2403400625302348, 0.2097267449884807, 0.2077797382372322, 0.0528171258444069, 0.5796295519547618]
d = [-0.19042488014433387, -0.12327494909764392, 0.1375210661085345, 0.6761811401202289, -0.1166616863114129, -0.30415233325640434, 0.04316097809907034, -0.06919021988282643, 0.034749802301750767, -0.21324406837933085, 0.14265803785348677, 0.4355631865094337, -0.1189421524946502, -0.556442350092039, -0.5358310047923789, -0.5257642049195982, 0.2967096099765573, -0.5530599252406037, -0.5616262537428958, -0.5496862604469596, 0.3102290283029167, -0.26876970441305015, 0.24293513167458208, 0.13771653251824578, 0.4305406565179847, -0.27760100244237773, -0.217754084865319, -0.3804105328513234, 0.23071950805871833, -0.12268756593656843, 0.65488395637137, 0.3123226857917638, 0.42311941666215375, -0.18525495979999126, -0.18353112675158173, -0.05222615712063643]
e = [0.35153699701068697, 0.6434014441704597, 0.5199917202962425, 0.8846524954955095, 0.45290093171840207, 0.47645210967254026, 0.3862686451682818, 0.27725918105099223, 0.5021373122835974, 0.5804601411319348, 0.7315577112536759, 0.7553440704968449, 0.689205735585101, 0.12989069997666505, 0.3746014647977457, 0.36846509808570893, 0.7127594894992852, 0.3946275725849304, 0.5676087572289983, 0.41672111291925834, 0.5547425849907655, 0.2500089681587326, 0.46299092165234734, 0.6304851584488947, 0.5011622585404422, 0.5346426939341682, 0.38744415310057967, 0.7161744630685772, 0.22743668895293023, 0.17875013909508222, 0.5459805369393353, 0.8138317879443662, 0.7452148089247868, 0.36091207705772865, 0.3412608659141734, 0.5539682873686353]

import numpy as np
import gym
from NeuroEvolve import *
import time
env=gym.make('LunarLander-v2')
env.reset()
nn=NeuroES(8,4,softmax)
nn.completed_network()
nn.set_weights(e)
done=False
observation=[0,0,0,0,0,0,0,0]
total_reward=0
average=0
for i in range(100):
    while True:
        if done == True:
            # observation=[0,0,0,0,0,0,0,0]
            #print winner
            env.reset()
            #print total_reward
            average+=total_reward
            total_reward=0
            done = False
            break
        #nn.set_weights(winner)
        # observation=observation[:6]
        outp = nn.evaluate(observation)
        actp = np.argmax(outp)


        observation, reward, done, info = env.step(actp)
        total_reward+=reward
        #time.sleep(0.05)
        env.render()
print float(average)/200
